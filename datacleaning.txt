# RC number patterns
rc_raw = [
    r"Application number:\s*(.+?)(?=\s*Applicant)",
    r"Application numbers:\s*(.+)(?=\s*Applicant)",
    r"Application number(s):\s*(.+)(?=\s*Applicant)"
]
rc= "".join(dict.fromkeys(rc_raw))

# Company name patterns
company_raw = [
    r"Applicant:\s*(.+?)(?=\s*Site address)",
    r"Applicant's name:\s*(.+?)(?=\s*Site address)"
]
company= "".join(dict.fromkeys(company_raw))

# Address patterns
address_raw = r"Site address:\s*(.+?)(?=\s*Legal description)"
address = "".join(dict.fromkeys(address_raw))

# Issue date patterns
issue_date_raw = [
    r"Date:\s*(\d{1,2} [A-Za-z]+ \d{4})",
    r"Date:\s*(\d{1,2}/\d{1,2}/\d{2,4})",
    r"(\b\d{1,2} [A-Za-z]+ \d{4}\b)",
    r"Date:\s*(\b\d{1,2}(?:st|nd|rd|th)?\s+[A-Za-z]+\s+\d{4}\b)"
]
issue_date_raw1 = r"(\b\d{2}/\d{2}/\d{2}\b)"

issue_date_str= "".join(dict.fromkeys(issue_date_raw))
issue_date_str1 = "".join(dict.fromkeys(issue_date_raw1))

# AUP triggers
trigger_raw= [
    r"(E14\.\d+\.\d+)",
    r"(E14\.\d+\.)",
    r"(NES:STO)",
    r"(NES:AQ)"
]
AUP_triggers = " ".join(dict.fromkeys(trigger_raw))

# Reason
proposal_raw =r"Proposal\s*:\s*(.+?)(?=\n[A-Z]|\.)"
proposal = "".join(dict.fromkeys(proposal_raw))

# Conditions
conditions_raw = [
    r"(?<=Conditions).*?(?=Advice notes)",
    r"(?<=Specific conditions - Air Discharge DIS\d{5,}(?:-\w+)?\b).*?(?=Specific conditions -)",
    r"(?<=Air Quality conditions).*?(?=Wastewater Discharge conditions)",
    r"(?<=Air Discharge Permit Conditions).*?(?=E. Definitions)",
    r"(?<=Air discharge - DIS\d{5,}(?:-\w+)?\b).*?(?=DIS\d{5,}(?:-\w+)?\b)",
    r"(?<=Specific conditions - DIS\d{5,}(?:-\w+)?\b (s15 Air Discharge permit)).*?(?=Advice notes)",
    r"(?<=Conditions Specific to air quality).*?(?=Advice notes)",
    r"(?<=Specific conditions - air discharge - DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=regional discharge DIS\d{5,}(?:-w+)?\b).*?(?=Advice notes)",
    r"(?<=Specific conditions - discharge permit DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=Specific conditions - DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=Specific conditions - air discharge consent DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=Consolidated conditions of consent as amended).*?(?=Advice notes)",
    r"(?<=Specific conditions - Air Discharge DIS\d{5,}\b).*?(?=Advice notes)",
    r"(?<=Air discharge - DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=DIS\d{5,}(?:-\w+)?\b - Specific conditions).*?(?=Advice notes)",
    r"(?<=DIS\d{5,}(?:-\w+)?\b - Specific conditions).*?(?=DIS\d{5,}(?:-\w+)?\b - Specific conditions)",
    r"(?<=Specific Conditions - DIS\d{5,}(?:-\w+)?\b (s15 Air Discharge permit)).*?(?=Advice notes)",
    r"(?<=Conditions relevant to Air Discharge Permit DIS\d{5,}(?:-\w+)?\b Only).*?(?=Advice notes)",
    r"(?<=Conditions relevant to Air Discharge Permit DIS\d{5,}(?:-\w+)?\b).*?(?=Specific Conditions -)",
    r"(?<=SPECIFIC CONDITIONS - DISCHARGE TO AIR DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=Conditions relevant to Discharge Permit DIS\d{5,}(?:-\w+)?\b only).*?(?=Advice notes)",
    r"(?<=Specific conditions - air discharge permit DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=Specific conditions - air discharge permit (DIS\d{5,}(?:-\w+)?\b)).*?(?=Advice notes)",
    r"(?<=Specific conditions - DIS\d{5,}(?:-\w+)?\b (air)).*?(?=Advice notes)",
    r"(?<=Specific conditions - air discharge consent DIS\d{5,}(?:-\w+)?\b).*?(?=Specifc conditions)",
    r"(?<=Attachment 1: Consolidated conditions of consent as amended).*?(?=Advice notes)",
    r"(?<=Specific Air Discharge Conditions).*?(?=Advice notes)",
    r"(?<=Specific conditions - Discharge to Air: DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=Specific conditions - discharge permit (air discharge) DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=Air Discharge Limits).*?(?= Acoustic Conditions)",
    r"(?<=Specific conditions - discharge consent DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=Specific conditions - air discharge permit (s15) DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=Specific conditions - air discharge permit DIS\d{5,}(?:-\w+)?\b).*?(?=Secific conditions)",
    r"(?<=Specific conditions relating to Air discharge permit - DIS\d{5,}(?:-\w+)?\b).*?(?=General Advice notes)",
    r"(?<=Specific conditions - Discharge permit (s15) - DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=Specific Conditions - discharge consent DIS\d{5,}(?:-\w+)?\b).*?(?=Specific conditions)",
    r"(?<=Specific conditions - Discharge to air: DIS\d{5,}(?:-\w+)?\b).*?(?=Specific conditions)",
    r"(?<=Attachement 1: Consolidated conditions of consent as amended).*?(?=Resource Consent Notice of Works Starting)",
    r"(?<=Specific conditions - Air Discharge consent - DIS\d{5,}(?:-\w+)?\b).*?(?=Specific conditions)",
    r"(?<=Specific conditions - Discharge consent DIS\d{5,}(?:-\w+)?\b).*?(?=Advice notes)",
    r"(?<=DIS\d{5,}(?:-\w+)?\b - Air Discharge).*?(?=SUB\d{5,}\b) - Subdivision",
    r"(?<=DIS\d{5,}(?:-\w+)?\b & DIS\d{5,}(?:-\w+)?\b).*?(?=).*?(?=SUB\d{5,}\b) - Subdivision",
    r"(?<=Specific conditions - Discharge Permit DIS\d{5,}(?:-\w+)?\b).*?(?=Advice Notes - General)",
    r"(?<=AIR QUALITY - ROCK CRUSHER).*?(?=GROUNDWATER)"
    ]

conditions_raw1= r"(?<=Conditions).*?(?=Advice notes)"

conditions =" ".join(dict.fromkeys(conditions_raw))
conditions1 =" ".join(dict.fromkeys(conditions_raw1))

#Consent Expiry
expiry_raw= [
    r"expire on (\d{1,2} [A-Za-z]+ \d{4})",
    r"expires on (\d{1,2} [A-Za-z]+ \d{4})",
    r"expires (\d{1,2} [A-Za-z]+ \d{4})",
    r"expire (\d{1,2} [A-Za-z]+\d{4})",
    r"(\d{1,} years) from the date of commencement",
    r"DIS\d{5,}(?:-w+)?\b will expire (\d{1,} years [A-Za-z]+[.?!])",
    r"expires (\d{1,} months [A-Za-z])+[.?!]",
    r"expires on (\d{1,2}(?:st|nd|rd|th)?\s+[A-Za-z]+\s+\d{4}\b)",
    r"expire on (\d{1,2}/\d{1,2}/\d{4})",
    r"expire ([A-Za-z](\d{1,}) years)",
    r"expires [(\d{1,} years [A-Za-z]+[.?1])",
]
expiry = "".join(dict.fromkeys(expiry_raw))

# Management Plans
managementplan_raw = r"(?i)\b(\w+)\sManagement Plan"
management_plan = re.findall(managementplan_raw, conditions, re.DOTALL) #extracting Management Plans from conditions
managementplan_final = list(dict.fromkeys([f"{word} Management Plan" for word in management_plan]))
